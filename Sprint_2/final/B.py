# https://contest.yandex.ru/contest/22781/problems/B/
# https://contest.yandex.ru/contest/22781/run-report/78728625/
'''
--Описание решения--
Решение реализовано на основе стека, исходя из шагов описанных в формулировке 
задачи. Итериуясь по исходной строке мы накапливаем числа в стэке, извлекая их
при встрече со знаком математической операции. После выполнения вычислительного 
шага результат кладется на вершину стека, таким образом он будет доступен для 
следющих вычислений.

--Доказательство корректности--
Структура LIFO позволяет нам хранить числа в порядке очредности выисления.
На выходе элементы необходимо инвертировать для корректных операций вычитания и 
деления.

--Временная сложность--
Сложность алгоритма O(n), так как каждый элемент входной строки считывается 
один раз, а каждый математическая операция требует ровно два числа из стека.
Извлечение элемента с вершины стэка потребует O(1) времени.

--Пространственная сложность--
В худшем случае стэк потребует для хранения O(n) дополнительной памяти.
'''

def calculate(line: str):
    stack = []
    for item in line:
        if item == '+':
            a, b = stack.pop(), stack.pop()
            stack.append(b + a)
        elif item == '-':
            a, b = stack.pop(), stack.pop()
            stack.append(b - a)
        elif item == '*':
            a, b = stack.pop(), stack.pop()
            stack.append(b * a)
        elif item == '/':
            a, b = stack.pop(), stack.pop()
            stack.append(b // a)
        else:
            stack.append(int(item))
    return stack[-1]

print(calculate(input().strip().split()))


    